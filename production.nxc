const short wheelradius=28; //wheel radius, in mm
const short wheelbase=272; // distance between drive wheels, in mm.

const short motorMin=22; //minimum speed to make drive motor move;

const byte motorL=OUT_B;
const byte motorR=OUT_C;
const byte motorS=OUT_A;

const short soundMin=50;
const short lightMin=45;

const short sortAngle=55;
const short sortZero=5;
const short cansPerSide=3;

const int trashGoal[]={1500,-1050};
const int nukeGoal[]={100,1000};

const float thetaProportion=wheelradius/wheelbase;


// !!!!!!!!!!!  Unless intentionally resetting motor counters, use motorEX commands with flag RESET_NONE

float posX = 0;
float posY = 0;
float posT = 0;
float prevT = 0;
int prevL=0;
int prevR=0;

int margin=0;
int goalX=0;
int goalY=0;
int goalT=0;
int speed=0;

float light=0;

int resumeCourse[][];
short storedCans[][];

mutex driveControlMutex;
bool externalControl=FALSE;

void goToPoint(int goalXgtp,int goalYgtp,int marginGtp) {

  margin=marginGtp;
  goalX=goalXgtp;
  goalY=goalYgtp;

  int deltaX=0;
  int deltaY=100;
  while((sqrt(pow(deltaX,2)+pow(deltaY,2)))>margin) {
    deltaX=posX-goalX;
    deltaY=goalY-posY;
  
    goalT=atan2d(deltaX,deltaY);
    goalT+=360;
    goalT%=360;
    
    speed = sqrt(pow(deltaX,2)+pow(deltaY,2));
    
    speed/=3;

    if (speed>100) {
       speed=100;
    } else if (speed<(-100)) {
       speed=(-100);
    }
    
    
    Wait(10);
    

  }
  speed=0;
  PlayTone(620, 200);
  //Wait(10);
  return;
}


void deposit() {
     Acquire(driveControlMutex);
     externalControl=TRUE;
     OnFwdEx(motorR, -70, RESET_NONE);
     OnFwdEx(motorL, -70, RESET_NONE);
     Wait(800);
     PlayTone(400,400);
     externalControl=FALSE;
     Release(driveControlMutex);
}


task sweep() {

//while (TRUE) {

//goalT=180;
//speed=0;


    goToPoint(-1160,2000,1);
    
//    goToPoint(400,400,20);
//
//    goToPoint(400,-400,20);
//
//    goToPoint(-400,-400,20);
//
//    goToPoint(-400,400,20);
//
//    goToPoint(0,0,20);

//
//    Wait(10000);
//
//    goToPoint(230,860,50); //N1
//
//    Wait(10000);
//
//    goToPoint(-985,530,50); //N2
//
//    Wait(10000);
//
//    goToPoint(835,-370,50); //N3
//
//    Wait(10000);
//
//    goToPoint(0,0,20);


//}

}

task driveTask() {
   while (TRUE) {
          if (externalControl==FALSE) {
          Acquire(driveControlMutex);

          int deltaT=(goalT-posT);
          if (deltaT>180) {
            deltaT-=360;
          } else if (deltaT<-180) {
            deltaT+=360;
          }
          
          int speedL=speed-deltaT;
          int speedR=speed+deltaT;
          
          if (speedL<0) {
            speedL=((100-motorMin)*speedL/100);
            speedL-=motorMin;
          } else if(speedL>0) {
            speedL=((100-motorMin)*speedL/100);
            speedL+=motorMin;
          } else {
            OffEx(motorL, RESET_NONE);
          }

          if (speedR<0) {
            speedR=((100-motorMin)*speedR/100);
            speedR-=motorMin;
          } else if(speedR>0) {
            speedR=((100-motorMin)*speedR/100);
            speedR+=motorMin;
          } else {
            OffEx(motorR, RESET_NONE);
          }
          
          if(abs(speedL)>100 || abs(speedR)>100) {
            int maxSpeed=0;
            if (abs(speedL)>abs(speedR)) {
               maxSpeed=abs(speedL);
            } else {
               maxSpeed=abs(speedR);
            }
            speedL*=100;
            speedL/=maxSpeed;
            speedR*=100;
            speedR/=maxSpeed;
          }

          TextOut(1, LCD_LINE1, "         x   y" );
          TextOut(1, LCD_LINE2, "pos" );
          NumOut(40, LCD_LINE2, floor(posX));
          NumOut(75, LCD_LINE2, floor(posY));
          TextOut(1, LCD_LINE3, "goal" );
          NumOut(40, LCD_LINE3, floor(goalX));
          NumOut(75, LCD_LINE3, floor(goalY));
          TextOut(1, LCD_LINE4, "Sens");

          
          int r,g,b;
          float setpoint=0;
          ReadSensorHTColor(S2, setpoint, r, g, b);
          
          NumOut(30, LCD_LINE4, r);
          NumOut(50, LCD_LINE4, g);
          NumOut(70, LCD_LINE4, b);
          //NumOut(60, LCD_LINE4, floor(sqrt(pow(deltaX,2)+pow(deltaY,2))));
          TextOut(1, LCD_LINE5, "goal T" );
          NumOut(60, LCD_LINE5, floor(goalT));
          TextOut(1, LCD_LINE6, "pos T" );
          NumOut(60, LCD_LINE6, floor(posT));
          TextOut(1, LCD_LINE8, "motr spd" );
          NumOut(75, LCD_LINE8, speedL);
          NumOut(40, LCD_LINE8, speedR);

          
          OnFwdEx(motorR, speedR, RESET_NONE);
          OnFwdEx(motorL, speedL, RESET_NONE);

          Release(driveControlMutex);
          
   } //end if

    Wait(20);
    
    ClearScreen();
  }
}


task positionTask() {
  while (true) {

    int tachR = MotorBlockTachoCount(motorR);
    int tachL = MotorBlockTachoCount(motorL);

    posT=(tachR-tachL)*thetaProportion;
    posT%=360;
    posT+=360;
    posT+=prevT;
    posT%=360;
    
    float distMag=(tachR-prevR)+(tachL-prevL);      // the magnitude of the distance, in degrees of wheel turn.
    distMag*=21.991148575128552669238503682957;     // page 19 (7 pi)
    distMag*=194;                                   // experimental ratio numerator
    distMag/=200;                                   // experimental ratio denominator
    distMag/=90;                                    // page 19

    posX-=distMag*sind(posT);
    posY+=distMag*cosd(posT);
    
    light=(0.6*light)+(0.4 * SENSOR_3);
    light=Floor(light);
    
    Wait(20);
    
    prevR=tachR;
    prevL=tachL;
    
  }
}


task sorter() {

  while(TRUE) {
  
    //short resumePoint=ArrayLen(resumeCourse);
//    resumeCourse[resumePoint][0]=goalX;
//    resumeCourse[resumePoint][1]=goalY;
//    resumeCourse[resumePoint][2]=margin;


    if (SENSOR_4==1) {  //if touch sensor is touched
    
        Wait(500);
        short depositLocation=0;
        short canType=0;
        if (SENSOR_2 > soundMin) {   //nuclear
           canType=1;
           for (int j=1; j<=2; j++) {
               for (int i=cansPerSide; i>=0; i--) {
                   if (TRUE) { // storedCans[j][i]==0) {
                      depositLocation=j;
                   }
               }
           }
        } else {  //Trash
           canType=2;
           for (int j=2; j>=1; j--) {
               for (int i=cansPerSide; i>=0; i--) {
                   if (TRUE) { //storedCans[j][i]==0) {
                      depositLocation=j;
                   }
               }
           }
        }
        if (depositLocation==1) {
           PosRegSetAngle(motorS,(sortZero-sortAngle));
           Wait(900);
        } else if (depositLocation==2) {
           PosRegSetAngle(motorS,(sortZero+sortAngle));
           Wait(900);
        }
    } else {
      PosRegSetAngle(motorS,sortZero);
    }
  }
}


task main() {

     OffEx(OUT_ABC,RESET_ALL);
     Precedes(positionTask);
     if (light>=lightMin) { // on trash side
        posT=180;
        posX=800;
     } else {               // on nuke side
        posX=-1160;
        posT=0;
     }
     
     
     ArrayInit(storedCans, 0, cansPerSide); // CPS 0s
     ArrayInit(storedCans, storedCans, 3); // 3 arrays of that

     PosRegEnable(motorS,150,20,20);
     
     prevT=posT;
     SetSensorUltrasonic(S1);        //set up ultrasonic sensor S1
     //SetSensorSound(S2);             //set up sound sensor S2
     SetSensorLowspeed(S2);          //set up color sensor S2
     SetSensorLight(S3,false);       //set up light sensor S3
     SetSensor(S4, SENSOR_TOUCH);    //set up touch sensor S4

  Precedes(driveTask,positionTask,sweep,sorter);
}
